// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: customer/customer.proto

package customer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CustomerService_AddCustomer_FullMethodName      = "/customer.CustomerService/AddCustomer"
	CustomerService_FindCustomerByID_FullMethodName = "/customer.CustomerService/FindCustomerByID"
	CustomerService_GetAllCustomers_FullMethodName  = "/customer.CustomerService/GetAllCustomers"
)

// CustomerServiceClient is the client API for CustomerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CustomerServiceClient interface {
	AddCustomer(ctx context.Context, in *Customer, opts ...grpc.CallOption) (*CustomerResponse, error)
	FindCustomerByID(ctx context.Context, in *CustomerQueryRequest, opts ...grpc.CallOption) (*CustomerResponse, error)
	GetAllCustomers(ctx context.Context, in *AllCustomersQueryRequest, opts ...grpc.CallOption) (*CustomerListResponse, error)
}

type customerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomerServiceClient(cc grpc.ClientConnInterface) CustomerServiceClient {
	return &customerServiceClient{cc}
}

func (c *customerServiceClient) AddCustomer(ctx context.Context, in *Customer, opts ...grpc.CallOption) (*CustomerResponse, error) {
	out := new(CustomerResponse)
	err := c.cc.Invoke(ctx, CustomerService_AddCustomer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) FindCustomerByID(ctx context.Context, in *CustomerQueryRequest, opts ...grpc.CallOption) (*CustomerResponse, error) {
	out := new(CustomerResponse)
	err := c.cc.Invoke(ctx, CustomerService_FindCustomerByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) GetAllCustomers(ctx context.Context, in *AllCustomersQueryRequest, opts ...grpc.CallOption) (*CustomerListResponse, error) {
	out := new(CustomerListResponse)
	err := c.cc.Invoke(ctx, CustomerService_GetAllCustomers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomerServiceServer is the server API for CustomerService service.
// All implementations must embed UnimplementedCustomerServiceServer
// for forward compatibility
type CustomerServiceServer interface {
	AddCustomer(context.Context, *Customer) (*CustomerResponse, error)
	FindCustomerByID(context.Context, *CustomerQueryRequest) (*CustomerResponse, error)
	GetAllCustomers(context.Context, *AllCustomersQueryRequest) (*CustomerListResponse, error)
	mustEmbedUnimplementedCustomerServiceServer()
}

// UnimplementedCustomerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCustomerServiceServer struct {
}

func (UnimplementedCustomerServiceServer) AddCustomer(context.Context, *Customer) (*CustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCustomer not implemented")
}
func (UnimplementedCustomerServiceServer) FindCustomerByID(context.Context, *CustomerQueryRequest) (*CustomerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCustomerByID not implemented")
}
func (UnimplementedCustomerServiceServer) GetAllCustomers(context.Context, *AllCustomersQueryRequest) (*CustomerListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCustomers not implemented")
}
func (UnimplementedCustomerServiceServer) mustEmbedUnimplementedCustomerServiceServer() {}

// UnsafeCustomerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CustomerServiceServer will
// result in compilation errors.
type UnsafeCustomerServiceServer interface {
	mustEmbedUnimplementedCustomerServiceServer()
}

func RegisterCustomerServiceServer(s grpc.ServiceRegistrar, srv CustomerServiceServer) {
	s.RegisterService(&CustomerService_ServiceDesc, srv)
}

func _CustomerService_AddCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Customer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).AddCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerService_AddCustomer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).AddCustomer(ctx, req.(*Customer))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_FindCustomerByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).FindCustomerByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerService_FindCustomerByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).FindCustomerByID(ctx, req.(*CustomerQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_GetAllCustomers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllCustomersQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).GetAllCustomers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerService_GetAllCustomers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).GetAllCustomers(ctx, req.(*AllCustomersQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CustomerService_ServiceDesc is the grpc.ServiceDesc for CustomerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CustomerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "customer.CustomerService",
	HandlerType: (*CustomerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCustomer",
			Handler:    _CustomerService_AddCustomer_Handler,
		},
		{
			MethodName: "FindCustomerByID",
			Handler:    _CustomerService_FindCustomerByID_Handler,
		},
		{
			MethodName: "GetAllCustomers",
			Handler:    _CustomerService_GetAllCustomers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "customer/customer.proto",
}
