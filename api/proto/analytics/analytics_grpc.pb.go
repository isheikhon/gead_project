// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: analytics/analytics.proto

package analytics

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CustomerService_GetTotalSales_FullMethodName     = "/analytics.CustomerService/GetTotalSales"
	CustomerService_GetSalesByProduct_FullMethodName = "/analytics.CustomerService/GetSalesByProduct"
	CustomerService_GetTopCustomers_FullMethodName   = "/analytics.CustomerService/GetTopCustomers"
)

// CustomerServiceClient is the client API for CustomerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CustomerServiceClient interface {
	GetTotalSales(ctx context.Context, in *GetTotalSalesRequest, opts ...grpc.CallOption) (*GetTotalSalesResponse, error)
	GetSalesByProduct(ctx context.Context, in *GetSalesByProductRequest, opts ...grpc.CallOption) (*GetSalesByProductResponse, error)
	GetTopCustomers(ctx context.Context, in *GetTopCustomersRequest, opts ...grpc.CallOption) (*GetTopCustomersResponse, error)
}

type customerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCustomerServiceClient(cc grpc.ClientConnInterface) CustomerServiceClient {
	return &customerServiceClient{cc}
}

func (c *customerServiceClient) GetTotalSales(ctx context.Context, in *GetTotalSalesRequest, opts ...grpc.CallOption) (*GetTotalSalesResponse, error) {
	out := new(GetTotalSalesResponse)
	err := c.cc.Invoke(ctx, CustomerService_GetTotalSales_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) GetSalesByProduct(ctx context.Context, in *GetSalesByProductRequest, opts ...grpc.CallOption) (*GetSalesByProductResponse, error) {
	out := new(GetSalesByProductResponse)
	err := c.cc.Invoke(ctx, CustomerService_GetSalesByProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) GetTopCustomers(ctx context.Context, in *GetTopCustomersRequest, opts ...grpc.CallOption) (*GetTopCustomersResponse, error) {
	out := new(GetTopCustomersResponse)
	err := c.cc.Invoke(ctx, CustomerService_GetTopCustomers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomerServiceServer is the server API for CustomerService service.
// All implementations must embed UnimplementedCustomerServiceServer
// for forward compatibility
type CustomerServiceServer interface {
	GetTotalSales(context.Context, *GetTotalSalesRequest) (*GetTotalSalesResponse, error)
	GetSalesByProduct(context.Context, *GetSalesByProductRequest) (*GetSalesByProductResponse, error)
	GetTopCustomers(context.Context, *GetTopCustomersRequest) (*GetTopCustomersResponse, error)
	mustEmbedUnimplementedCustomerServiceServer()
}

// UnimplementedCustomerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCustomerServiceServer struct {
}

func (UnimplementedCustomerServiceServer) GetTotalSales(context.Context, *GetTotalSalesRequest) (*GetTotalSalesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTotalSales not implemented")
}
func (UnimplementedCustomerServiceServer) GetSalesByProduct(context.Context, *GetSalesByProductRequest) (*GetSalesByProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSalesByProduct not implemented")
}
func (UnimplementedCustomerServiceServer) GetTopCustomers(context.Context, *GetTopCustomersRequest) (*GetTopCustomersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopCustomers not implemented")
}
func (UnimplementedCustomerServiceServer) mustEmbedUnimplementedCustomerServiceServer() {}

// UnsafeCustomerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CustomerServiceServer will
// result in compilation errors.
type UnsafeCustomerServiceServer interface {
	mustEmbedUnimplementedCustomerServiceServer()
}

func RegisterCustomerServiceServer(s grpc.ServiceRegistrar, srv CustomerServiceServer) {
	s.RegisterService(&CustomerService_ServiceDesc, srv)
}

func _CustomerService_GetTotalSales_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTotalSalesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).GetTotalSales(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerService_GetTotalSales_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).GetTotalSales(ctx, req.(*GetTotalSalesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_GetSalesByProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSalesByProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).GetSalesByProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerService_GetSalesByProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).GetSalesByProduct(ctx, req.(*GetSalesByProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_GetTopCustomers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopCustomersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).GetTopCustomers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CustomerService_GetTopCustomers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).GetTopCustomers(ctx, req.(*GetTopCustomersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CustomerService_ServiceDesc is the grpc.ServiceDesc for CustomerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CustomerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "analytics.CustomerService",
	HandlerType: (*CustomerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTotalSales",
			Handler:    _CustomerService_GetTotalSales_Handler,
		},
		{
			MethodName: "GetSalesByProduct",
			Handler:    _CustomerService_GetSalesByProduct_Handler,
		},
		{
			MethodName: "GetTopCustomers",
			Handler:    _CustomerService_GetTopCustomers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "analytics/analytics.proto",
}
